global
    # Log to syslog
    log      ${hosts:syslog}:${ports:syslog} local2

    # Max connections
    maxconn  ${limits:open-files}

    # Number of processes
    nbproc 1

defaults
    # Use HTTP connections
    mode http

    # close HTTP keep-alives to make header analysis work across keep-alives
    option httpclose

    # Remove requests from the queue if people press stop button
    option abortonclose

    # Try to connect this many times on failure
    retries 3

    # If a client is bound to a particular backend but it goes down,
    # send them to a different one
    option redispatch

    # Expose a URL to make it easier to check if haproxy is up
    monitor-uri /_haproxy_ping_

    # Default timeouts
    timeout connect 7s
    timeout queue   300s
    timeout client  300s
    timeout server  300s

    # Enable status page at this URL, on the port HAProxy is bound to
listen stats
    bind-process 1
    bind ${hosts:haproxy}:${ports:haproxy-stats}
    stats enable
    stats uri /
    stats refresh 5s
    stats realm Haproxy statistics

# Default front-end

frontend loadbalancer

    # Bind to the given address
    bind ${hosts:haproxy}:${ports:haproxy}

    # Log errors in HTTP logging format
    log    global
    option httplog
    option dontlog-normal

    # Access rules

    # Check for hostnames in request
    # acl default_cluster url_sub ${hosts:public}
    acl ${site1:sitename}_cluster url_sub ${site1:servername}
    acl ${site2:sitename}_cluster url_sub ${site2:servername}
    acl ${site3:sitename}_cluster url_sub ${site3:servername}
    acl ${site4:sitename}_cluster url_sub ${site4:servername}
    acl ${site5:sitename}_cluster url_sub ${site5:servername}
    acl ${site6:sitename}_cluster url_sub ${site6:servername}
    acl ${site7:sitename}_cluster url_sub ${site7:servername}
    acl ${site8:sitename}_cluster url_sub ${site8:servername}
    acl ${site9:sitename}_cluster url_sub ${site9:servername}
    acl ${site10:sitename}_cluster url_sub ${site10:servername}
    acl ${site11:sitename}_cluster url_sub ${site11:servername}
    acl ${site12:sitename}_cluster url_sub ${site12:servername}
    acl ${site13:sitename}_cluster url_sub ${site13:servername}
    acl ${site14:sitename}_cluster url_sub ${site14:servername}
    acl ${site15:sitename}_cluster url_sub ${site15:servername}
    acl ${site16:sitename}_cluster url_sub ${site16:servername}



    # Check that we have at least one node up in each cluster
    acl ${site1:sitename}_cluster_up    nbsrv(site1)  gt 0
    acl ${site2:sitename}_cluster_up    nbsrv(site2)  gt 0
    acl ${site3:sitename}_cluster_up    nbsrv(site3)  gt 0
    acl ${site4:sitename}_cluster_up    nbsrv(site4)  gt 0
    acl ${site5:sitename}_cluster_up    nbsrv(site5)  gt 0
    acl ${site6:sitename}_cluster_up    nbsrv(site6)  gt 0
    acl ${site7:sitename}_cluster_up    nbsrv(site7)  gt 0
    acl ${site8:sitename}_cluster_up    nbsrv(site8)  gt 0
    acl ${site9:sitename}_cluster_up    nbsrv(site9)  gt 0
    acl ${site10:sitename}_cluster_up   nbsrv(site10) gt 0
    acl ${site11:sitename}_cluster_up   nbsrv(site11) gt 0
    acl ${site12:sitename}_cluster_up   nbsrv(site12) gt 0
    acl ${site13:sitename}_cluster_up   nbsrv(site13) gt 0
    acl ${site14:sitename}_cluster_up   nbsrv(site14) gt 0
    acl ${site15:sitename}_cluster_up   nbsrv(site15) gt 0
    acl ${site16:sitename}_cluster_up   nbsrv(site16) gt 0



    # Routing
    use_backend site1 if ${site1:sitename}_cluster_up ${site1:sitename}_cluster
    use_backend site2 if ${site2:sitename}_cluster_up ${site2:sitename}_cluster
    use_backend site3 if ${site3:sitename}_cluster_up ${site3:sitename}_cluster
    use_backend site4 if ${site4:sitename}_cluster_up ${site4:sitename}_cluster
    use_backend site5 if ${site5:sitename}_cluster_up ${site5:sitename}_cluster
    use_backend site6 if ${site6:sitename}_cluster_up ${site6:sitename}_cluster
    use_backend site7 if ${site7:sitename}_cluster_up ${site7:sitename}_cluster
    use_backend site8 if ${site8:sitename}_cluster_up ${site8:sitename}_cluster
    use_backend site9 if ${site9:sitename}_cluster_up ${site9:sitename}_cluster
    use_backend site10 if ${site10:sitename}_cluster_up ${site10:sitename}_cluster
    use_backend site11 if ${site11:sitename}_cluster_up ${site11:sitename}_cluster
    use_backend site12 if ${site12:sitename}_cluster_up ${site12:sitename}_cluster
    use_backend site13 if ${site13:sitename}_cluster_up ${site13:sitename}_cluster
    use_backend site14 if ${site14:sitename}_cluster_up ${site14:sitename}_cluster
    use_backend site15 if ${site15:sitename}_cluster_up ${site15:sitename}_cluster
    use_backend site16 if ${site16:sitename}_cluster_up ${site16:sitename}_cluster


    default_backend panic

# Backend for all nodes.
backend site1

    # Load balance based on number of connections
    balance leastconn

    # Record where we've been
    rspadd X-Cluster:\ default

    # Note: The maxconn values here match the ZServer thread count. This means requests pile up
    # in HAProxy until Zope's ready, instead of getting stuck in Zope.

    server ${site1:sitename}  ${hosts:main}:${site1:zope-port} check rise 1 weight 50 maxconn 4

backend site2
    balance leastconn
    rspadd X-Cluster:\ default
    server ${site2:sitename}  ${hosts:main}:${site2:zope-port} check rise 1 weight 50 maxconn 4

backend site3
    balance leastconn
    rspadd X-Cluster:\ default
    server ${site3:sitename}  ${hosts:main}:${site3:zope-port} check rise 1 weight 50 maxconn 4

backend site4
    balance leastconn
    rspadd X-Cluster:\ default
    server ${site4:sitename}  ${hosts:main}:${site4:zope-port} check rise 1 weight 50 maxconn 4

backend site5
    balance leastconn
    rspadd X-Cluster:\ default
    server ${site5:sitename}  ${hosts:main}:${site5:zope-port} check rise 1 weight 50 maxconn 4

backend site6
    balance leastconn
    rspadd X-Cluster:\ default
    server ${site6:sitename}  ${hosts:main}:${site6:zope-port} check rise 1 weight 50 maxconn 4

backend site7
    balance leastconn
    rspadd X-Cluster:\ default
    server ${site7:sitename}  ${hosts:main}:${site7:zope-port} check rise 1 weight 50 maxconn 4

backend site8
    balance leastconn
    rspadd X-Cluster:\ default
    server ${site8:sitename}  ${hosts:main}:${site8:zope-port} check rise 1 weight 50 maxconn 4

backend site9
    balance leastconn
    rspadd X-Cluster:\ default
    server ${site9:sitename}  ${hosts:main}:${site9:zope-port} check rise 1 weight 50 maxconn 4

backend site10
    balance leastconn
    rspadd X-Cluster:\ default
    server ${site10:sitename}  ${hosts:main}:${site10:zope-port} check rise 1 weight 50 maxconn 4

backend site11
    balance leastconn
    rspadd X-Cluster:\ default
    server ${site11:sitename}  ${hosts:main}:${site11:zope-port} check rise 1 weight 50 maxconn 4

backend site12
    balance leastconn
    rspadd X-Cluster:\ default
    server ${site12:sitename}  ${hosts:main}:${site12:zope-port} check rise 1 weight 50 maxconn 4

backend site13
    balance leastconn
    rspadd X-Cluster:\ default
    server ${site13:sitename}  ${hosts:main}:${site13:zope-port} check rise 1 weight 50 maxconn 4

backend site14
    balance leastconn
    rspadd X-Cluster:\ default
    server ${site14:sitename}  ${hosts:main}:${site14:zope-port} check rise 1 weight 50 maxconn 4

backend site15
    balance leastconn
    rspadd X-Cluster:\ default
    server ${site15:sitename}  ${hosts:main}:${site15:zope-port} check rise 1 weight 50 maxconn 4

backend site16
    balance leastconn
    rspadd X-Cluster:\ default
    server ${site16:sitename}  ${hosts:main}:${site16:zope-port} check rise 1 weight 50 maxconn 4



# This is hit only if none of the other clusters are working
backend panic

    balance leastconn

    # Panic!!!!111eleven!!
    redirect location ${urls:fallback} drop-query
